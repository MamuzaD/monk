generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Board {
  id            String   @id(map: "Board_pkey") @default(uuid())
  orgId         String
  title         String
  imageId       String?
  imageThumbUrl String?
  imageFullUrl  String?
  imageLinkHTML String?
  imageUsername String?
  color         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lists         List[]

  @@map("Monk_Board")
}

model List {
  id        String   @id(map: "List_pkey") @default(uuid())
  title     String
  order     Int
  boardId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cards     Card[]
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade, map: "List_boardId_fkey")

  @@index([boardId], map: "List_boardId_idx")
  @@map("Monk_List")
}

model Card {
  id          String   @id(map: "Card_pkey") @default(uuid())
  title       String
  order       Int
  description String?
  listId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  list        List     @relation(fields: [listId], references: [id], onDelete: Cascade, map: "Card_listId_fkey")

  @@index([listId], map: "Card_listId_idx")
  @@map("Monk_Card")
}

model Note {
  id        String   @id(map: "Note_pkey") @default(uuid())
  orgId     String
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Monk_Note")
}

model AuditLog {
  id          String      @id(map: "AuditLog_pkey") @default(uuid())
  orgId       String
  action      ACTION
  entityId    String
  entityType  ENTITY_TYPE
  entityTitle String
  userId      String
  userImage   String
  userName    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("Monk_AuditLog")
}

model OrgLimit {
  id        String   @id(map: "OrgLimit_pkey") @default(uuid())
  orgId     String   @unique(map: "OrgLimit_orgId_key")
  count     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Monk_OrgLimit")
}

model NoteLimit {
  id        String   @id(map: "NoteLimit_pkey") @default(uuid())
  orgId     String   @unique(map: "NoteLimit_orgId_key")
  count     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Monk_NoteLimit")
}

model OrgSubscription {
  id                     String    @id(map: "OrgSubscription_pkey") @default(uuid())
  orgId                  String    @unique(map: "OrgSubscription_orgId_key")
  stripeCustomerId       String?   @unique(map: "OrgSubscription_stripe_customer_id_key") @map("stripe_customer_id")
  stripeSubscriptionId   String?   @unique(map: "OrgSubscription_stripe_subscription_id_key") @map("stripe_subscription_id")
  stripePriceId          String?   @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map("stripe_current_period_end")

  @@map("Monk_OrgSubscription")
}

enum ACTION {
  CREATE
  UPDATE
  DELETE
  RENAME
}

enum ENTITY_TYPE {
  BOARD
  NOTE
  LIST
  CARD
}
